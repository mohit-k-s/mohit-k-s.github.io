<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hobby_projects on Mohit&#39;s Page</title>
    <link>http://localhost:1313/tags/hobby_projects/</link>
    <description>Recent content in Hobby_projects on Mohit&#39;s Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Mohit Kumar</copyright>
    <lastBuildDate>Thu, 21 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/hobby_projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building Meteo</title>
      <link>http://localhost:1313/blog/2025/meteo/</link>
      <pubDate>Thu, 21 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2025/meteo/</guid>
      <description>&lt;p&gt;Another weather app ?&lt;/p&gt;&#xA;&lt;img src=&#34;../images/i-cant-hear-you-yes.gif&#34; alt=&#34;Can&#39;t hear you over the metro noise&#34; width=&#34;200&#34; /&gt;&#xA;&lt;p&gt;No !&lt;/p&gt;&#xA;&lt;p&gt;I built this app for myself. The design isn&amp;rsquo;t perfect (yet), but it works. Here&amp;rsquo;s how I put it together.&#xA;One might ask , why ? To that i have no answer as i just thought that this can be cool !&lt;/p&gt;&#xA;&lt;div class=&#34;iframe-container&#34;&gt;&#xA;&lt;iframe src=&#34;https://meteo-v1.vercel.app/&#34; title=&#34;Meteo&#34; loading=&#34;lazy&#34; &gt;&lt;/iframe&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;the-data-challenge&#34;&gt;The Data Challenge&lt;/h2&gt;&#xA;&lt;p&gt;Building any transit app starts with data—lots of it. I needed:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;All metro stations with accurate coordinates&lt;/li&gt;&#xA;&lt;li&gt;Line connections and routes&lt;/li&gt;&#xA;&lt;li&gt;Station elevations (for that authentic metro map feel)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;station-data-collection&#34;&gt;Station Data Collection&lt;/h3&gt;&#xA;&lt;p&gt;I started with the official DMRC website, manually extracting all lines and stations. Getting coordinates was trickier. My first attempt used &lt;a href=&#34;https://operations.osmfoundation.org/policies/nominatim/&#34;&gt;Nominatim&lt;/a&gt;, OpenStreetMap&amp;rsquo;s geocoding service, but the results were disappointing—many stations were missing or had wildly inaccurate locations.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Another weather app ?</p>
<img src="../images/i-cant-hear-you-yes.gif" alt="Can't hear you over the metro noise" width="200" />
<p>No !</p>
<p>I built this app for myself. The design isn&rsquo;t perfect (yet), but it works. Here&rsquo;s how I put it together.
One might ask , why ? To that i have no answer as i just thought that this can be cool !</p>
<div class="iframe-container">
<iframe src="https://meteo-v1.vercel.app/" title="Meteo" loading="lazy" ></iframe>
</div>
<h2 id="the-data-challenge">The Data Challenge</h2>
<p>Building any transit app starts with data—lots of it. I needed:</p>
<ul>
<li>All metro stations with accurate coordinates</li>
<li>Line connections and routes</li>
<li>Station elevations (for that authentic metro map feel)</li>
</ul>
<h3 id="station-data-collection">Station Data Collection</h3>
<p>I started with the official DMRC website, manually extracting all lines and stations. Getting coordinates was trickier. My first attempt used <a href="https://operations.osmfoundation.org/policies/nominatim/">Nominatim</a>, OpenStreetMap&rsquo;s geocoding service, but the results were disappointing—many stations were missing or had wildly inaccurate locations.</p>
<p>Plan B: Google Maps API. More reliable, but required careful rate limiting and cost management.</p>
<p>The final dataset lives in <a href="https://github.com/mohit-k-s/meteo/blob/main/public/dmrc.json">dmrc.json</a> on GitHub. It includes:</p>
<ul>
<li>250+ metro stations</li>
<li>Coordinate data for each station</li>
<li>Line connections and transfers</li>
<li>(Mostly fictional) elevation data</li>
</ul>
<h3 id="the-elevation-problem">The Elevation Problem</h3>
<p>Metro maps show elevation changes, but this data isn&rsquo;t publicly available. My current solution? I generated random elevations that look reasonable. Not ideal, but functional.</p>
<p>Future plan: Use OCR on official metro elevation maps to extract real data.</p>
<h2 id="route-planning-algorithm">Route Planning Algorithm</h2>
<p>The core routing uses a simple depth-first search (DFS) to find paths between stations. Delhi Metro&rsquo;s network guarantees connectivity—you can get from any station to any other station, even if it requires multiple transfers.</p>
<p>The algorithm could be optimized with Dijkstra&rsquo;s for shortest paths, but DFS works fine for this use case.</p>
<h2 id="frontend-implementation">Frontend Implementation</h2>
<p>I used Leaflet.js for the interactive map—it&rsquo;s lightweight and handles the station plotting beautifully. The UI is minimal by design:</p>
<ul>
<li>Search for start/end stations</li>
<li>Visual route display on the map</li>
<li>Step-by-step directions</li>
<li>Transfer information</li>
</ul>
<p>The interface needs work. I know it&rsquo;s not intuitive, but hey:</p>
<img src="../images/honest_works.jpg" alt="It ain't much, but it's honest work" width="300"/>
<h2 id="deployment">Deployment</h2>
<p>Vercel made deployment trivial. Push to GitHub, automatic builds and done!</p>
<h2 id="lessons-learned">Lessons Learned</h2>
<ol>
<li><strong>Start with data</strong>: Good data is harder to find than you think</li>
<li><strong>Simple algorithms work</strong>: DFS solved the routing problem perfectly</li>
<li><strong>Open source everything</strong>: Someone else might find this useful</li>
</ol>
<p>The code is on <a href="https://github.com/mohit-k-s/meteo">GitHub</a> <br>
The website is live, <a href="https://meteo-v1.vercel.app/">Meteo</a></p>
<hr>
<p><em>Building tools for problems you actually have is the best kind of side project. Even if the UI looks like it was designed in 2005.</em></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
